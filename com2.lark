%import common.WS
%import common.SH_COMMENT
%ignore WS
%ignore SH_COMMENT

start: section+

// identifiers
ID: /[a-z_][a-z0-9_]*/i

// types
array_dim : "[" [INT] "]"
type : ID array_dim*

// expressions
INT: /[0-9]+/
ARITH_OP : "+" | "-" | "*" | "/"
expr : ID | INT | "(" expr ")" | expr ARITH_OP expr | expr "[" expr "]"


// sections
?section: parameters | variables | states | functions
parameters: "parameters" "{"  (param_declaration ";")* "}"
variables: "variables" "{" (var_declaration ";")* "}"
states: "states" "{" state* "}"
functions: "functions" "{" function* "}"

param_declaration : type ID ["=" expr]
var_declaration : type ID


TIME_UNIT.1 : "s" | "ms" | "us" | "ns"
duration : expr TIME_UNIT
?condition : duration | ID
condition_list : (condition ("," condition)*)?
state : [ID ":"] "(" condition_list ")" "{" state_actions "}" [transitions]
state_actions : (state_action ";")*
?state_action : wire_write | wire_read_write | variable_assignment

!wire_read_write : id "==>" expr -> transfer_to_right
                 | expr "<==" id -> transfer_to_left
!wire_write : id "-->" expr -> send_to_right
            | expr "<--" id -> send_to_left
variable_assignment : ID "=" expr

transitions :  "[" transition ("," transition)* "]"
transition : [expr] "=>" ID

function : "fn" ID "(" arg_list ")" "{" stmt_list "}"
arg_list : (arg ("," arg)*)?
arg : IO_TYPE type ID
IO_TYPE.1 : "input" | "output"

stmt_list : (stmt ";")*
?stmt: variable_assignment | state_path
state_path : ID "..." ID
