%import common.WS
%import common.SH_COMMENT
%ignore WS
%ignore SH_COMMENT

start: section+

// identifiers
ID: /[a-z_][a-z0-9_]*/i
PREPROCESS_ID : "$" ID

// types
array_dim : "[" [INT] "]"
type : ID array_dim*

// expressions
INT: /[0-9]+/
ARITH_OP : "+" | "-" | "*" | "/" | "%" | "|" | "^" | "&" | "==" | "!="
UNARY_OP : "!" | "~"
expr : l_value | INT | "(" expr ")" | expr ARITH_OP expr | UNARY_OP expr | PREPROCESS_ID
l_value : ID ("[" expr "]")*


// sections
?section: parameters | variables | states | functions
parameters: "parameters" "{"  (param_declaration ";")* "}"
variables: "variables" "{" (var_declaration ";")* "}"
states: "states" "{" state_block* "}"
?state_block : state | for_loop
for_loop : "for" PREPROCESS_ID "in" INT "to" INT "{" state_block* "}"
functions : "left"  "{" function* "}" -> left_functions
          | "right" "{" function* "}" -> right_functions

param_declaration : type ID ["=" expr]
var_declaration : type ID


TIME_UNIT.1 : "s" | "ms" | "us" | "ns"
duration : expr TIME_UNIT
?condition : duration | ID
condition_list : (condition ("," condition)*)?
state : [ID ":"] "(" condition_list ")" "{" state_actions "}" [transitions]
state_actions : (state_action ";")*
?state_action : wire_write | wire_read_write | variable_assignment

wire_read_write : ID "==>" l_value -> transfer_to_right
                 | l_value "<==" ID -> transfer_to_left
wire_write : ID "-->" expr -> send_to_right
            | expr "<--" ID -> send_to_left
variable_assignment : l_value "=" expr

transitions :  "[" transition ("," transition)* "]"
transition : [expr] "=>" ID

function : "fn" ID "(" arg_list ")" "{" stmt_list "}"
arg_list : (argument ("," argument)*)?
argument : IO_TYPE type ID
IO_TYPE.1 : "input" | "output"

stmt_list : (stmt ";")*
?stmt: variable_assignment | state_path
state_path : ID "..." ID
